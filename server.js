/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/

const express = require("express");
const app = express();
let mongoose;
try {
  mongoose = require("mongoose");
} catch (e) {
  console.log(e);
}
const path = require("path");
const bodyParser = require("body-parser");
const router = express.Router();

const cors = require("cors");
require("dotenv").config();

app.use(cors());
app.use(express.static("public"));

// global setting for safety timeouts to handle possible
// wrong callbacks that will never be called
const TIMEOUT = 10000;

app.use(bodyParser.urlencoded({ extended: "false" }));
app.use(bodyParser.json());

app.get("/", function (req, res) {
  res.sendFile(path.join(__dirname, "views", "index.html"));
});

router.get("/is-mongoose-ok", function (req, res) {
  if (mongoose) {
    res.json({ isMongooseOk: !!mongoose.connection.readyState });
  } else {
    res.json({ isMongooseOk: false });
  }
});

const User = require("./user.js").UserModel;
const Exercise = require("./exercise.js").ExerciseModel;
const Log = require("./log.js").LogModel;

router.use(function (req, res, next) {
  if (req.method !== "OPTIONS" && User.modelName !== "User") {
    return next({ message: "User Model is not correct" });
  }
  next();
});

const createUser = require("./user.js").createAndSaveUser;
router.post("/users", function (req, res, next) {
  // try to create a new instance based on their model
  // verify it's correctly defined in some way
   let user = req.body;
   console.log("ðŸš€ ~ file: server.js:57 ~ user:", user)
   let t = setTimeout(() => {
        next({ message: "timeout" });
      }, TIMEOUT);
      createUser(user, function (err, data) {
        clearTimeout(t);
        if (err) {
          return next(err);
        }
        if (!data) {
          console.log("Missing `done()` argument");
          return next({ message: "Missing callback argument" });
        }
        User.findById(data._id);
        res.json(data);
      });
});

const findAll = require("./user.js").findAll;
router.get("/users", function (req, res, next) {
  let t = setTimeout(() => {
    next({ message: "timeout" });
  }, TIMEOUT);
  findAll( function (err, data) {
      clearTimeout(t);
      if (err) {
        return next(err);
      }
      if (!data) {
        console.log("Missing `done()` argument");
        return next({ message: "Missing callback argument" });
      }
      res.json(data);
    });
});

const findById = require("./user.js").findUserById;
router.get("/users/:_id", function (req, res, next) {
  let t = setTimeout(() => {
    next({ message: "timeout" });
  }, TIMEOUT);
    findById(req.params._id, function (err, data) {
      clearTimeout(t);
      if (err) {
        return next(err);
      }
      if (!data) {
        console.log("Missing `done()` argument");
        return next({ message: "Missing callback argument" });
      }
      res.json(data);
  });
});

// const update = require("./user.js").findAndUpdate;
// router.post("/find-one-update", function (req, res, next) {
//   let t = setTimeout(() => {
//     next({ message: "timeout" });
//   }, TIMEOUT);
//   let p = new User(req.body);
//   p.save(function (err, pers) {
//     if (err) {
//       return next(err);
//     }
//     try {
//       update(pers.name, function (err, data) {
//         clearTimeout(t);
//         if (err) {
//           return next(err);
//         }
//         if (!data) {
//           console.log("Missing `done()` argument");
//           return next({ message: "Missing callback argument" });
//         }
//         res.json(data);
//         p.remove();
//       });
//     } catch (e) {
//       console.log(e);
//       return next(e);
//     }
//   });
// });

const removeOne = require("./user.js").removeById;
router.post("/remove-one-user", function (req, res, next) {
  User.remove({}, function (err) {
    if (err) {
      return next(err);
    }
    let t = setTimeout(() => {
      next({ message: "timeout" });
    }, TIMEOUT);
    let p = new User(req.body);
    p.save(function (err, pers) {
      if (err) {
        return next(err);
      }
      try {
        removeOne(pers._id, function (err, data) {
          clearTimeout(t);
          if (err) {
            return next(err);
          }
          if (!data) {
            console.log("Missing `done()` argument");
            return next({ message: "Missing callback argument" });
          }
          console.log(data);
          User.count(function (err, cnt) {
            if (err) {
              return next(err);
            }
            data = data.toObject();
            data.count = cnt;
            console.log(data);
            res.json(data);
          });
        });
      } catch (e) {
        console.log(e);
        return next(e);
      }
    });
  });
});

// LOGS


// EXERCISE
const createExercise = require("./exercise.js").createAndSaveExercise;
router.post("/users/:_id/exercises", function (req, res, next) {
   let exercise = req.body;
   let _id = req.params._id;
   let t = setTimeout(() => {
        next({ message: "timeout" });
      }, TIMEOUT);
      createExercise(_id, exercise, function (err, data) {
        clearTimeout(t);
        if (err) {
          return next(err);
        }
        if (!data) {
          console.log("Missing `done()` argument");
          return next({ message: "Missing callback argument" });
        }
        res.json(data);
      });
});

const findExerciseById = require("./exercise.js").findExerciseById;
router.get("/users/:_id/exercises", function (req, res, next) {
  let t = setTimeout(() => {
    next({ message: "timeout" });
  }, TIMEOUT);
  findExerciseById(req.params._id, function (err, data) {
      clearTimeout(t);
      if (err) {
        return next(err);
      }
      if (!data) {
        console.log("Missing `done()` argument");
        return next({ message: "Missing callback argument" });
      }
      res.json(data);
  });
});


// LOG

const findLogById = require("./log.js").findLogById;
router.get("/users/:_id/logs", function (req, res, next) {
  let t = setTimeout(() => {
    next({ message: "timeout" });
  }, TIMEOUT);
  findLogById(req.params._id, req.query, function (err, data) {
      clearTimeout(t);
      if (err) {
        return next(err);
      }
      if (!data) {
        console.log("Missing `done()` argument");
        return next({ message: "Missing callback argument" });
      }
      res.json(data);
  });
});

const enableCORS = function (req, res, next) {
    if (!process.env.DISABLE_XORIGIN) {
      const allowedOrigins = ["https://www.freecodecamp.org"];
      const origin = req.headers.origin;
      if (!process.env.XORIGIN_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
        console.log(req.method);
        res.set({
          "Access-Control-Allow-Origin": origin,
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers":
            "Origin, X-Requested-With, Content-Type, Accept",
        });
      }
    }
    next();
  };

  
app.use("/api", enableCORS, router);

// Error handler
app.use(function (err, req, res, next) {
  if (err) {
    res
      .status(err.status || 500)
      .type("txt")
      .send(err.message || "SERVER ERROR");
  }
});

// Unmatched routes handler
app.use(function (req, res) {
  if (req.method.toLowerCase() === "options") {
    res.end();
  } else {
    res.status(404).type("txt").send("Not Found");
  }
});

const listener = app.listen(process.env.PORT || 3000, function () {
  console.log("Your app is listening on port " + listener.address().port);
});

/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/
